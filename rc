#!/bin/sh

custom_restart() { default_restart "$@"; }
custom_start()   { default_start   "$@"; }
custom_stop()    { default_stop    "$@"; }
custom_poll()    { default_poll    "$@"; }

. /etc/fastrc.cfg

on_boot() {
    echo_color 3 Mounting Pseudo-Filesystems
    mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev &
    mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev &
    mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev &
    mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid &
    mkdir -p /dev/pts /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec &
    mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev &
    echo_color 2 "[OK] All Pseudo-Filesystems Mounted"
    echo_color 3 Setting up loopback
    /usr/sbin/ip link set up dev lo &
    echo_color 2 "[OK] Loopback initiated"
    echo_color 3 Starting device daemon
    /usr/lib/systemd/systemd-udevd --daemon &
    /usr/bin/udevadm trigger --action=add --type=subsystems &
    /usr/bin/udevadm trigger --action=add --type=devices &
    echo_color 3 Setting hostname to $HOSTNAME
    echo "$HOSTNAME" >| /proc/sys/kernel/hostname
    echo_color 2 [OK] Hostname Set
    echo_color 3 Mounting filesystems
    mount -a &
    mount -o remount,rw / &
    echo_color 2 "[OK] Mounted Filesystems"
    for predmn in $PREUDEV; do
        if [ "$(echo "$predmn" | awk '{ s=substr($0, 1, 1); print s; }')" = '@' ]; then
            custom_start "$(echo "$predmn" | awk '{ s=substr($0, 2); print s; }')" &
        else
            custom_start "$predmn" &
        fi
done
    echo_color 2 "[OK] All pre-udev daemons started"
    echo_color 3 "[...] Waiting for device daemon to start"
    sleep 5
    echo_color 2 "[OK] Device daemon started"
    echo_color 3 starting daemons...
    for postdmn in $POSTUDEV; do
        if [ "$(echo "$postdmn" | awk '{ s=substr($0, 1, 1); print s; }')" = '@' ]; then
            custom_start "$(echo "$postdmn" | awk '{ s=substr($0, 2); print s; }')" &
        else
            custom_start "$postdmn" &
        fi
done
   echo_color 2 "[OK] All post-udev daemons started"
   echo_color 4 "Welcome To BusyArch!"
   if [ -x /etc/fastrc.init ]; then 
  	echo_color 3 Running init rc script
	/etc/fastrc.init &
   fi
   echo "1" > /etc/runstate
}

on_shutdown() {
    echo_color 3 Stopping daemons
    custom_stop all
    echo_color 2 [OK] All daemons stopped
    if [ -x /etc/fastrc.shutdown ]; then
        echo_color 3 Running shutdown rc script
        /etc/fastrc.shutdown &
    fi

    echo_color 3 "Stopping device daemon"
    killall systemd-udevd

    echo_color 3 Unmounting /run
    umount -r /run &
    echo_color 2 "[OK] Unmounted /run"
}

default_start() {
    echo_color 2 starting "$1"...
    case "$1" in
    all)
        for dmn in $DAEMONS $ENABLED; do
            custom_poll "${dmn##@}" || custom_start "${dmn##@}"
        done;;
    alsa)
        alsactl restore;;
    bitlbee)
        su -s /bin/sh -c 'bitlbee -F' bitlbee;;
    dbus)
        mkdir -p /run/dbus &&
            dbus-uuidgen --ensure &&
            dbus-daemon --system;;
    iptables)
        iptables-restore < /etc/iptables/iptables.rules;;
    sshd)
        /usr/bin/sshd;;  # requires an absolute path
    privoxy)
        privoxy --user privoxy.privoxy /etc/privoxy/config;;
    polipo)
        su -c 'polipo daemonise=true logFile="/var/log/polipo.log"' -s /bin/sh - nobody;;
    dhcpcd)
        if ip link | grep -Fq $NETWORK_INTERFACE; then :; else
            echo_color 3 "waiting for $NETWORK_INTERFACE to settle..."
            for i in $(seq 100); do
                ip link | grep -Fq $NETWORK_INTERFACE && break
                sleep 1
            done
        fi
        dhcpcd -nqb;;
    vsftpd)
        vsftpd &;;
    lighttpd)
        lighttpd -f /etc/lighttpd/lighttpd.conf;;
    ntpd)
        ntpd -g -u ntp;;
    wpa_supplicant)
        wpa_supplicant -Dwext -B -i"$WIFI_INTERFACE" -c/etc/wpa_supplicant.conf;;
# if you want to add a custom way to launch a daemon, use the following format
#   <name>)
#	<command to execute>;;
    *)
        "$1";;
    esac
}

default_stop() {
    echo_color 1 stopping "$1"...
    case "$1" in
    all)
        for dmn in $DAEMONS $ENABLED; do
            custom_poll "${dmn##@}" && custom_stop "${dmn##@}"
        done;;
    alsa)
        alsactl store;;
    dbus)
        killall dbus-launch
        killall dbus-daemon
        rm /run/dbus/pid;;
    iptables)
        for table in $(cat /proc/net/ip_tables_names); do
            iptables-restore < /var/lib/iptables/empty-"$table".rules
        done;;
# if you want to add a custom way to stop a daemon, use same format as starting
    *)
        killall "$1";;
    esac
}

default_restart() {
    case "$1" in
    sshd)
        busybox setsid sh -c '"$0" stop "$@"; "$0" start "$@"' "$0" "$@";;
# if you want to add a custom way to restart a daemon, use the same format as starting
    *)
        custom_stop "$@"
        custom_start "$@";;
    esac
}

default_poll() {
    case "$1" in
    alsa)
        return 0;; # checking is useless
    iptables)
        iptables -L -n | grep -m 1 -q '^ACCEPT\|^REJECT';;
    dbus)
        test -e /run/dbus/pid;;
# if you want to add a custom way to detect if a process is running, use the same format as starting
    *)
        pgrep "(^|/)$1\$" >/dev/null 2>&1;;
    esac
}

echo_color() {
  color="$1"
  shift
  printf "\033[1;3%sm%s\033[00m\n" "$color" "$*"
}


#===================
# handle arguments
case "$1" in
init)
	if [ "$(cat /etc/runstate)" = "0" ]; then
	    on_boot
    else
	    echo_color 1 "Don't run rc init while computer is booted"
	    echo "Dropping into emergency shell"
	    echo "To fix boot run echo 0 > /etc/runstate and reboot the computer"
	    PS1="Emergency $" /bin/sh # oh yeah this is totally safe, just a failsafe though
    fi;;
shutdown)
    on_shutdown
    echo 0 > /etc/runstate;;
start|stop|restart)
    cmd="$1"
    shift
    for dmn in ${@:-$DAEMONS}; do
        custom_"${cmd}" "$dmn"
    done;;
''|list)
    for dmn in $DAEMONS; do
        if custom_poll "$dmn" >/dev/null 2>&1; then
            echo_color 2 [X] "$dmn"
        else
            echo_color 0 [ ] "$dmn"
        fi
    done;;
--version)
	echo_color 2 "Version: fastrc 0.1.0"
	echo "Modified by Byl3x"
	echo "Based on minirc 0.2 made by hut and contributors";;
--info)
	echo "This modified version displays more progress info and more colors at boot"
	echo "Some commands are also run with & to speed up the boot process"
	echo "The bootup also waits 5 seconds for udev to start before trying to start daemons to prevent 'device not found' errors";;
*)
    self=$(basename "$0")
    echo "Usage: $self [--help] [--version] <action> [daemons]"
    echo
    echo "Actions:"
    echo "   $self list               shows status of all daemons (default action)"
    echo "   $self start [daemons]    starts daemons"
    echo "   $self stop [daemons]     stops daemons"
    echo "   $self restart [daemons]  restarts daemons"
    echo "   Daemons and how to start them can be defined in /etc/fastrc.cfg"
    echo "   Some fallback values are in /sbin/rc";;
esac
